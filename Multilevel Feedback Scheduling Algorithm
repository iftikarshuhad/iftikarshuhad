// Multilevel Feedback Queue Scheduling by Iftikar Alam Shuhad
// Reg-11802493
#include<stdio.h>
#include<stdlib.h>
struct process //to hold the attributes liike Arrival Time ,Burst Time ,etc.
{
    char name;
    //AT(Arrival),BT(Burst),TAT(Turn Around),CT(Completion)
    int AT,BT,WT,TAT,RT,CT;

}
P1[10],P2[10],P3[10];//we make Three Queues for the process

int n; // It is the number of Processes

void sortByArrival() //Here we sort the processes in terms of Arrival to execute process
{
struct process temp;
int i,j;
for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
            {
            if(P1[i].AT>P1[j].AT)
                    {
                        temp=P1[i];
                          P1[i]=P1[j];
                        P1[j]=temp;
                    }
            }
    }
}

int main()
{
     int i,j,k=0,r=0,time=0,tq1=8,tq2=16;
     int flag=0;
     char c;
     printf("Enter no of processes:");
     scanf("%d",&n);
     for(i=0,c='A';i<n;i++,c++)
     {
         P1[i].name=c;
         printf("\nEnter the arrival time and burst time of process %c: ",P1[i].name);
         scanf("%d%d",&P1[i].AT,&P1[i].BT);
         P1[i].RT=P1[i].BT;/*save burst time in remaining time for each process*/
     }

sortByArrival();
time=P1[0].AT;
printf("Process in first queue following RR with qt=8");
printf("\nProcess\t\tRT\t\tWT\t\tTAT\t\t");
for(i=0;i<n;i++)
{

  if(P1[i].RT<=tq1)
  {

       time+=P1[i].RT;/*from arrival time of first process to completion of this process*/
       P1[i].RT=0;
       P1[i].WT=time-P1[i].AT-P1[i].BT;/*amount of time process has been waiting in the first queue*/
       P1[i].TAT=time-P1[i].AT;/*amount of time to execute the process*/
       printf("\n%c\t\t%d\t\t%d\t\t%d",P1[i].name,P1[i].BT,P1[i].WT,P1[i].TAT);

  }
  else/*process moves to queue 2 with qt=16*/
  {
      P2[k].WT=time;
      time+=tq1;
      P1[i].RT-=tq1;
      P2[k].BT=P1[i].RT;
      P2[k].RT=P2[k].BT;
      P2[k].name=P1[i].name;
      k=k+1;
      flag=1;
   }
}

// This the second Queue with time quantum 16 Round Robin
if(flag==1)
 {
     printf("\nProcess in second queue following RR with qt=16");
    printf("\nProcess\t\tRT\t\tWT\t\tTAT\t\t");
 }
for(i=0;i<k;i++)
   {
    if(P2[i].RT<=tq2)
     {
       time+=P2[i].RT;/*from arrival time of first process +BT of this process*/
       P2[i].RT=0;
       P2[i].WT=time-tq1-P2[i].BT;/*amount of time process has been waiting in the ready queue*/
       P2[i].TAT=time-P2[i].AT;/*amount of time to execute the process*/
       printf("\n%c\t\t%d\t\t%d\t\t%d",P2[i].name,P2[i].BT,P2[i].WT,P2[i].TAT);

    }
    else/*process moves to queue 3 with FCFS*/
    {
      P3[r].AT=time;
      time+=tq2;
      P2[i].RT-=tq2;
      P3[r].BT=P2[i].RT;
      P3[r].RT=P3[r].BT;
      P3[r].name=P2[i].name;
      r=r+1;
      flag=2;
    }
  }

{if(flag==2)
printf("\nProcess in third queue following FCFS ");
}
for(i=0;i<r;i++)
{
    if(i==0)
            P3[i].CT=P3[i].BT+time-tq1-tq2;
        else
            P3[i].CT=P3[i-1].CT+P3[i].BT;

}

for(i=0;i<r;i++)
    {
        P3[i].TAT=P3[i].CT;
        P3[i].WT=P3[i].TAT-P3[i].BT;
        printf("\n%c\t\t%d\t\t%d\t\t%d\t\t",P3[i].name,P3[i].BT,P3[i].WT,P3[i].TAT);
    }
}
